"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.1.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Carrega as variáveis de ambiente do arquivo .env
# Isso deve ser feito antes de tentar acessar as variáveis
load_dotenv(BASE_DIR / '.env')

# --- LÓGICA DE AMBIENTE (Desenvolvimento vs. Produção) ---

# Lê a variável TARGET_ENV do arquivo .env ou do ambiente do sistema
TARGET_ENV = os.getenv('TARGET_ENV')

# Se TARGET_ENV for 'Dev', NOT_PROD será True.
# Se TARGET_ENV não existir (como em produção) ou for diferente, será False.
NOT_PROD = (TARGET_ENV == 'Dev')

if NOT_PROD:
    # --- CONFIGURAÇÕES DE DESENVOLVIMENTO ---
    print(">>> Ambiente de Desenvolvimento Ativado <<<")

    # A chave secreta pode ficar aqui para facilitar o desenvolvimento local.
    SECRET_KEY = 'django-insecure-d2vpcx=+s#db%2^0jx21&+zyu=$zg@eq-+-4-i%0$nc^df_gz#'

    # O modo Debug é ativado para mostrar erros detalhados.
    DEBUG = True

    # Permite acesso de qualquer host localmente.
    ALLOWED_HOSTS = []

    # Usa o banco de dados SQLite, que é um arquivo simples.
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

    # Media files (Desenvolvimento) - Servidos localmente
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

else:
    # --- CONFIGURAÇÕES DE PRODUÇÃO ---
    print(">>> Ambiente de Produção Ativado <<<")

    # Em produção, a SECRET_KEY DEVE ser lida de uma variável de ambiente.
    SECRET_KEY = os.getenv('SECRET_KEY')
    if not SECRET_KEY:
        raise ImproperlyConfigured("A variável de ambiente SECRET_KEY não foi definida em produção!")

    # O Debug NUNCA deve ser True em produção.
    DEBUG = os.getenv('DEBUG', '0').lower() in ['true', 't', '1']

    # Você deve configurar os domínios permitidos no seu servidor (ex: "meusite.com www.meusite.com")
    ALLOWED_HOSTS_RAW = os.getenv('ALLOWED_HOSTS')
    if ALLOWED_HOSTS_RAW:
        ALLOWED_HOSTS = ALLOWED_HOSTS_RAW.split(' ')
    else:
        ALLOWED_HOSTS = []
    
    CSRF_TRUSTED_ORIGINS_RAW = os.getenv('CSRF_TRUSTED_ORIGINS')
    if CSRF_TRUSTED_ORIGINS_RAW:
        CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_RAW.split(' ')
    else:
        CSRF_TRUSTED_ORIGINS = []


    # Configurações de segurança para HTTPS (SSL)
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', '0').lower() in ['true', 't', '1']
    if SECURE_SSL_REDIRECT:
        SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # Usa o banco de dados PostgreSQL, lendo as credenciais das variáveis de ambiente.
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DBNAME'),
            'HOST': os.environ.get('DBHOST'),
            'USER': os.environ.get('DBUSER'),
            'PASSWORD': os.environ.get('DBPASS'),
            'OPTIONS': {'sslmode': 'require'},
        }
    }

    # --- INÍCIO DA CONFIGURAÇÃO DO AZURE BLOB STORAGE ---
    
    AZURE_CONNECTION_STRING = os.environ.get('AZURE_STORAGE_CONNECTION_STRING')
    
    # O nome da conta de armazenamento que você criou (ex: 'sushiemcasastorage')
    AZURE_ACCOUNT_NAME = 'sushiemcasastorage' 
    
    # O nome do contêiner que você criou (ex: 'media')
    AZURE_CONTAINER_NAME = 'media'

    if not AZURE_CONNECTION_STRING:
        raise ImproperlyConfigured("A variável AZURE_STORAGE_CONNECTION_STRING não foi definida!")

    # Define o "motor" de armazenamento padrão para o Azure
    DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'
    
    # Garante que os arquivos não sejam sobrescritos
    AZURE_OVERWRITE_FILES = False

    # Media files (Produção) - Servidos pelo Azure
    # O MEDIA_ROOT não é necessário, pois os arquivos não ficam no servidor web
    MEDIA_URL = f'https://{AZURE_ACCOUNT_NAME}.blob.core.windows.net/{AZURE_CONTAINER_NAME}/'
    
    # --- FIM DA CONFIGURAÇÃO DO AZURE BLOB STORAGE ---


# --- RESTANTE DAS CONFIGURAÇÕES DO DJANGO ---

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "whitenoise.runserver_nostatic",
    # apps criados
    'usuario',
    'sushiemcasa',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# As configurações de MEDIA_URL e MEDIA_ROOT foram movidas
# para dentro dos blocos 'if NOT_PROD:' e 'else:'